{"version":3,"sources":["components/Header.js","components/Form.js","components/Daily.js","components/Weather.js","components/Favorites.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","to","Form","useState","setDisplay","options","setOptions","search","setSearch","getOptions","a","city","fetch","api_call","json","map","r","push","LocalizedName","useEffect","updateCityDex","loadweather","response","key","Key","getDaily","onClick","placeholder","value","name","onChange","event","val","target","test","alert","replace","i","tabIndex","Daily","f","date","temp","Math","floor","Weather","console","log","getWeather","k","city_key","toString","changeTemp","Temperature","Metric","Value","WeatherText","WeatherIcon","getKey","isFavorites","icon","text","addFavorites","week","w","index","Favorites","favorites","App","setCity","setKey","setTemp","setText","setWeek","setFavorites","setisFavorites","setIcon","some","includes","e","EnglishName","arr","DailyForecasts","Date","substring","Maximum","filter","p","id","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f7dc5228.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from \"react-router-dom\"; \r\n\r\n\r\n\r\nfunction Header (props) {\r\n\r\nreturn (\r\n\r\n    <div className = \"header-parnet\">\r\n\r\n <Link to = {'/'}>home</Link>\r\n   <br />\r\n <Link to = {'/favorites'}>favorites</Link>\r\n\r\n    </div>\r\n         \r\n)}\r\n\r\n\r\nexport default Header;","import React, { useEffect, useState } from \"react\";\r\n\r\nconst API_key = \"I1gKf7FcF8vPxXNbNDNSlBK6mvmSSjWC\"\r\n\r\n\r\nfunction Form  (props)  {\r\n    const [display, setDisplay] = useState(true);\r\n    const [options, setOptions] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    \r\n\r\n\r\n    const getOptions = async () => {\r\n        const city = [];\r\n        \r\n        if (search !==''){\r\n\r\n        const api_call = await fetch(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=I1gKf7FcF8vPxXNbNDNSlBK6mvmSSjWC&q=${search}`);\r\n       \r\n        const response = await api_call.json();\r\n  \r\n        response.map(r =>city.push(r.LocalizedName) )\r\n\r\n        setOptions(city);\r\n        \r\n     } else setOptions([])\r\n    \r\n    }\r\n  \r\n    useEffect(()  => {\r\n     \r\n     getOptions()\r\n    },[search]);\r\n  \r\n    // useEffect(() => {\r\n    //   window.addEventListener(\"mousedown\", handleClickOutside);\r\n    //   return () => {\r\n    //     window.removeEventListener(\"mousedown\", handleClickOutside);\r\n    //   };\r\n    // });\r\n  \r\n \r\n\r\n  \r\n    const updateCityDex = async city => {\r\n      \r\n      setSearch(city);\r\n\r\n      props.loadweather(city)\r\n\r\n      const api_call = await fetch(`http://dataservice.accuweather.com/locations/v1/cities/search?apikey=${API_key}&q=${city}`);\r\n\r\n      const response = await api_call.json();\r\n      \r\n      let key = (response[0].Key);\r\n      \r\n      props.getDaily(key)\r\n\r\n       setDisplay(false);\r\n\r\n      setOptions([]);\r\n    };\r\n    \r\n  \r\n    return (\r\n      <div  >\r\n\r\n            <div >\r\n            <div className = \"form\" >\r\n         \r\n           <input\r\n          className =\"auto\"\r\n           onClick={() => setDisplay(true)}\r\n          placeholder=\"Type to search\"\r\n          value={search}\r\n          name=\"city\"\r\n          onChange={event =>{\r\n            let val = event.target.value\r\n            if (/[^A-Za-z]/ig.test(val)) alert(\"only english letters\")\r\n            val = val.replace(/[^A-Za-z]/ig, '')\r\n             \r\n           setSearch(val)}}\r\n        />\r\n        {/* {display && ( */}\r\n          <div >\r\n            {options\r\n              .map((value, i) => {\r\n                return (\r\n                  <div\r\n                    onClick={() => updateCityDex(value)}\r\n                    className=\"option\"\r\n                    key={i}\r\n                    tabIndex=\"0\"\r\n                  >\r\n                    <span>{value}</span>\r\n                    \r\n                </div>) })}\r\n\r\n            </div>)\r\n\r\n            </div>\r\n            </div>\r\n            \r\n          </div>\r\n    \r\n    )\r\n  };\r\n\r\n\r\n\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\n\r\nfunction Daily (props) {\r\n\r\n    const fToc =  f =>{ return Math.floor((f-32)*(5/9)) } \r\n\r\n     \r\n     return (\r\n    \r\n         \r\n            \r\n            <div className = \"daily-item\">\r\n   \r\n   <h3>{props.date}</h3>\r\n   \r\n   <h2>{fToc(props.temp) }&deg;</h2>\r\n   \r\n            </div>\r\n\r\n        \r\n        )\r\n     \r\n}\r\n\r\n\r\nexport default Daily;","import React,{useEffect} from 'react';\r\n\r\nimport Header from './Header';\r\nimport Form from './Form';\r\nimport Daily from './Daily';\r\n\r\nconst API_key = \"I1gKf7FcF8vPxXNbNDNSlBK6mvmSSjWC\"\r\n\r\nfunction Weather (props) {\r\n\r\n    useEffect ( () => {\r\n      console.log(\"getweater\")\r\n      getWeather(); \r\n      });\r\n\r\n\r\n    const getWeather = async () => {\r\n\r\n        const k = props.city_key.toString();\r\n\r\n        const api_call = await fetch(`http://dataservice.accuweather.com/currentconditions/v1/${k}?apikey=${API_key}`);\r\n      \r\n        const response = await api_call.json();\r\n  \r\n        props.changeTemp(response[0].Temperature.Metric.Value,response[0].WeatherText,response[0].WeatherIcon);\r\n    }\r\n    \r\n\r\n     return (\r\n\r\n        <div className=\"weathr-parnet\">\r\n   <Header />\r\n   <h1>Cities Forecast</h1>\r\n   <Form loadweather = {props.getKey} getDaily = {props.getDaily} isFavorites = {props.isFavorites}/> \r\n   <div className = \"weather\">\r\n     <span >{props.icon}</span>\r\n   <h1>{props.city}</h1>\r\n   <h2>{props.temp}&deg;</h2>\r\n   <h2>{props.text}</h2>\r\n   </div>\r\n   <button onClick = {()=>props.addFavorites()}>  {(props.isFavorites) ? 'remove from favoriets' : 'add to favoriets '}</button>\r\n   <h1>5 day forecast</h1>\r\n   <div className = \"daily-parnt\">\r\n   {props.week.map ( (w,index) => \r\n   \r\n   <Daily date ={w.date} temp = {w.temp} key = {index} />\r\n   )}\r\n   </div>\r\n        </div>\r\n     )}\r\n\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Header from \"./Header\";\r\n\r\n\r\n\r\nfunction Favorites (props) {\r\n\r\nreturn (\r\n\r\n    <div className =\"favorites\">\r\n\r\n    <div className = \"favorites-header\">\r\n    <Header />\r\n    </div>\r\n\r\n    <div className = \"favorites-weathr\">\r\n    {props.favorites.map( f =>  \r\n       <div className = \"weather\">\r\n       <h1>{f.city}</h1>\r\n       <h1>{f.temp}&deg;</h1>\r\n       </div>\r\n    ) }\r\n    </div>  \r\n    \r\n </div>       \r\n)}\r\n\r\n\r\nexport default Favorites;","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport Weather from './components/Weather';\nimport {HashRouter as Router , Route , Switch} from 'react-router-dom';\nimport Favorites from './components/Favorites'\n\nconst API_key = \"I1gKf7FcF8vPxXNbNDNSlBK6mvmSSjWC\"\n\nfunction App() {\n\n\nconst [city , setCity] = useState('Tel Aviv');\nconst [key , setKey] = useState('215854');\nconst [temp , setTemp] = useState('');\nconst [text , setText] = useState('');\nconst [week, setWeek] = useState ([]);\nconst [favorites, setFavorites] = useState ([]);\nconst [isFavorites, setisFavorites] = useState (false);\nconst [icon, setIcon] = useState('')\n\n\nuseEffect ( () => {\n   getDaily('215854') \n},[]);\n\n\n\nuseEffect ( () => {\n  console.log('f');\n   setisFavorites(favorites.some(i => i.city.includes(city)))  ;\n   if(isFavorites)setIcon('**F**')\n   else setIcon('')\n});\n\n\n\nconst getKey = async e => {\n\n  const city = e;\n\n  const api_call = await fetch(`http://dataservice.accuweather.com/locations/v1/cities/search?apikey=${API_key}&q=${city}`);\n\n  const response = await api_call.json();\n  \n  setKey (response[0].Key);\n  \n  setCity (response[0].EnglishName)\n}\n\n\nconst changeTemp = (val,text) => {\n \n  setTemp(val);\n\n  setText(text);\n}\n\n\n\nconst getDaily = async (k) => {\n    \n  const api_call = await fetch(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${k}?apikey=${API_key}`);\n  const response = await api_call.json();\n   let arr = [];\n   for (let i = 0 ;i<5; i++)\n   arr = [...arr,{date: response.DailyForecasts[i].Date.substring(0,10), temp: response.DailyForecasts[i].Temperature.Maximum.Value }]\n   setWeek(arr) \n}\n\n\nconst addFavorites = () => {\n\n  if (!isFavorites)\n     setFavorites([...favorites,{id: key, city : city, temp: temp }]);\n    \n  else setFavorites( favorites.filter(p => p.city !== city));\n    \n}\n\n\n\n\n  return (\n\n    <div className=\"App\"> \n\n<Router>\n         <Switch>\n\n         <Route exact path=\"/\" render = {props => (\n         \n              <Weather city ={city} city_key ={key} temp = {temp} text = {text}  changeTemp = {changeTemp} addFavorites = {addFavorites} isFavorites = {isFavorites} getKey = {getKey} getDaily = {getDaily} week ={week} icon ={icon}/>)}/> \n         \n         <Route exact path=\"/favorites\" render = {props => (\n         \n              <Favorites favorites = {favorites} />)}/> \n        \n        </Switch> \n\n     </Router>  \n  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}